ARG base
FROM ${base}

# Docker script to append jupyter notebook. Please refer to:
#   https://github.com/jupyter/docker-stacks/blob/master/base-notebook/Dockerfile
LABEL maintainer="Yun Zhu(zhuyun@cbdai.com)"

# Configure environment
ARG notebook_user=cbd
ARG notebook_uid=1000
ARG notebook_gid=100
ENV USER=${notebook_user} \
    UID=${notebook_uid} \
    GID=${notebook_gid}
ENV HOME=/home/${USER}
ENV PROJECT_HOME=${HOME}

ARG notebook_password
ENV PASSWORD=${notebook_password}
ARG notebook_base_url
ENV BASE_URL=${notebook_base_url}

# Install jupyter notebook
#RUN pip install -i ${PYPI} --no-cache-dir jupyter
RUN pip install -i ${PYPI} --no-cache-dir ipython==5.0.0 \
    ipykernel==4.8.0 \
    notebook==5.6.0 \
    jupyter-console==5.0.0 \
    jupyter

# Add Tini. Tini operates as a process subreaper for jupyter.
# This prevents kernel crashes.
# ENV TINI_VERSION v0.16.1
# ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
ADD ./dockers/notebook/tini /tini
RUN chmod +x /tini
ENTRYPOINT ["/tini", "--"]

# Make /bin/sh symlink to bash instead of dash
RUN echo "dash dash/sh boolean false" | debconf-set-selections
RUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

# Create USER with specified UID and GID,and append it to "root" group.
RUN test -d ${HOME} && rm -r -f ${HOME} || :
RUN groupadd -f -g ${GID} ${USER} \
    && useradd -m -s /bin/bash -N -u ${UID} -g ${GID} ${USER} \
    && chown -R ${USER}:${GID} ${HOME} \
    && usermod -a -G root ${USER} \
    && echo "${USER} ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers.d/notebook \
    && echo "PATH=${PATH}:/usr/local/cuda-8.0:/usr/local/cuda-8.0/bin" | tee -a ${HOME}/.bashrc

# Install application
ADD ./application /opt/dl-application/application
ADD ./setup.py /opt/dl-application/setup.py
RUN cd /opt/dl-application \
    && python setup.py install \
    && rm -rf /opt/dl-application

# Install requirements
ADD ./requirements_* /opt/
RUN pip install -i ${PYPI} --no-cache-dir -r /opt/requirements_train.txt \
    && pip install -i ${PYPI} --no-cache-dir -r /opt/requirements_service.txt \
    && rm -rf /opt/requirements_*

# Assemble project
COPY ./scripts/start.sh /usr/local/bin/
COPY ./scripts/start_notebook.sh /usr/local/bin/
COPY ./dockers/notebook/jupyter_notebook_config.py /etc/jupyter/

EXPOSE 8888
WORKDIR ${HOME}
USER ${USER}
